scalar DateTime

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Coordinates {
    coordinates: [Float]
}

type Address {
    fullAddress: String
    location: Coordinates
}

type User {
    _id: String
    firstName: String!
    lastName: String!
    birthday: DateTime
    email: String!
    dateEmailVerified: String
    hashedPassword: String!
    datePasswordModified: DateTime
    phone: String
    address: Address
    role: String
    imagePath: String
    created_date: String
    mostVolunteered: Boolean
    rating: Float
    numberOfExecutedJesta: Int
    description: String
    medal: Int
}

input UserCreateInput {
    firstName: String!
    lastName: String!
    birthday: String
    email: String!
    hashedPassword: String!
    phone: String
    fullAddress: String
    longitude: Float
    altitude: Float
    description: String
}

input UserSecureUpdate {
    email: String
    password: String
    accountDelete: Boolean
}

input UserUpdateInput {
    firstName: String
    lastName: String
    birthday: String
    email: String
    hashedPassword: String
    phone: String
    fullAddress: String
    longitude: Float
    altitude: Float
    description: String
}

type JWT {
    token: String
    userId: String
}

type Query {
    getAllUsers: [User]
    getAllClients: [User]
    getAllAdmins: [User]
    getUser(_id: String, firstName: String, lastName: String, email: String): User
    getThreeMostExecutors: [User]
    getNumOfUsers: Int
    getFavor(favorId: String): PopulatedFavor
    getFavorsByDate(startingDate: DateTime, limitDate: DateTime): [Favor]
    getAllFavors: [Favor]
    getFavorsInRadios(center: [Float], radius: Float): [Favor]
    getByRadiosAndDateAndOnlyAvailable(center: [Float], radius: Float, startingDate: DateTime, limitDate: DateTime, notIncludeMe: Boolean): [Favor]
    gatAllFavorsByStatus(status: FavorStatus): [Favor]
    getAllUserFavors: [Favor]
    getNumberOfRequestedJesta: Int
    getCategory(name: String, id: String): Category
    getAllCategories: [Category]
    getAllParentCategories: [Category]
    getAllSubCategoriesByParentCategory(parentCategoryId: String): [Category]
    getAllPerforms: [Perform]
    getPerformsInRadios(center: [Float], radius: Float): [Perform]
    getAllFavorTransactionByFavorIdWhenOwner(favorId: String!): [PopulatedFavorTransaction]
    getAllUserFavorTransactionByFavorId(favorId: String!): FavorTransaction
    getAllFavorTransaction: [FavorTransaction]
    getAllUserFavorsRequestedTransaction: [PopulatedFavorTransaction]
    getAllUserFavorsWaitingForHandleTransaction: [FavorTransaction]
    getAllOwnerFavorTransactionByStatus(status: FavorTransactionStatus, fromDate: DateTime): [PopulatedFavorTransaction]
    getAllExecutorFavorTransactionByStatus(status: FavorTransactionStatus, fromDate: DateTime): [PopulatedFavorTransaction]
    getNumberOfOnProgressJesta: Int
    getNumberOfExecutedJesta: Int
    getTransactionById(id: String): PopulatedFavorTransaction
    getAllUserHandledFavorTransactionByStatus(status: FavorTransactionStatus, handledByUserId: String): [PopulatedFavorTransaction]
    getUsersRegistrationLastMonth: GraphData
    getJestaRegistrationLastMonth: GraphData
}

type Mutation {
    signUpUser(userParams: UserCreateInput, file: Upload): JWT
    signUpAdmin(userParams: UserCreateInput, file: Upload): JWT
    deleteUser(_id: String, email: String): String
    updateUser(_id: String, email: String, updatedUser: UserUpdateInput, newImage: Upload): String
    secureEmailPasswordAccountUpdate(_id: String, email: String, password: String, updateParams: UserSecureUpdate): String
    connectUser(email: String!, password: String!): JWT
    addUserToken(token: String): String
    createFavor(favor: FavorInput, images: [Upload]): Favor
    deleteFavor(favorId: String): String
    updateFavor(favorId: String, updatedFavor: UpdateFavorInput, newImages: [Upload]): String
    createCategory(name: String, parentCategory: String): Category
    updateCategory(nameToChange: String, newParentCategoryId: String, changedName: String): String
    deleteCategory(name: String): String
    createPerform(perform: PerformInput): Perform
    deletePerform(performId: String): String
    updatePerform(performId: String, updatedPerform: UpdatePerformInput): String
    createFavorTransactionRequest(favorId: String!, comment: String): String
    handleFavorTransactionRequest(favorTransactionId: String!, comment: String): String
    cancelFavorTransaction(favorTransactionId: String!): String
    executorNotifyDoneFavor(favorTransactionId: String!): String
    ownerNotifyJestaHasBeenDone(favorTransactionId: String!, rate: Int, handlerComment: String): String
    userChangeJestaTransactionToClosed(favorTransactionId: String!): String
    rateTransactionWithOptionalComment(favorTransactionId: String!, rate: Int, handlerComment: String): String
}

input CoordinatesInput {
    coordinates: [Float]
}

input AddressInput {
    fullAddress: String
    location: CoordinatesInput
}

type PopulatedFavor {
    _id: String!
    status: String!
    ownerId: User
    categoryId: [Category]
    numOfPeopleNeeded: Int!
    sourceAddress: Address
    destinationAddress: Address
    description: String
    imagesPath: [String]
    paymentAmount: Float
    paymentMethod: String
    dateToPublish: DateTime
    dateToExecute: DateTime
    dateToFinishExecute: DateTime
    dateLockedOut: DateTime
    dateCreated: DateTime
    dateLastModified: DateTime
}

type Favor {
    _id: String!
    status: String!
    ownerId: String!
    categoryId: [String!]!
    numOfPeopleNeeded: Int!
    sourceAddress: Address
    destinationAddress: Address
    description: String
    imagesPath: [String]
    paymentAmount: Float
    paymentMethod: String
    dateToPublish: DateTime
    dateToExecute: DateTime
    dateToFinishExecute: DateTime
    dateLockedOut: DateTime
    dateCreated: DateTime
    dateLastModified: DateTime
    mostVolunteeredOwner: Boolean
}

enum PaymentType {
    PAYPAL
    FREE
    CASH
}

enum FavorStatus {
    Available
    Unavailable
}

input FavorInput {
    ownerId: String!
    categoryId: [String!]!
    numOfPeopleNeeded: Int
    sourceAddress: AddressInput!
    destinationAddress: AddressInput
    description: String
    paymentAmount: Float
    paymentMethod: PaymentType!
    dateToPublish: DateTime
    dateToExecute: DateTime
    dateToFinishExecute: DateTime
    dateLockedOut: DateTime
}

input UpdateFavorInput {
    categoryId: [String!]
    numOfPeopleNeeded: Int
    sourceAddress: AddressInput
    destinationAddress: AddressInput
    description: String
    paymentAmount: Float
    paymentMethod: PaymentType
    dateToPublish: DateTime
    dateToExecute: DateTime
    dateToFinishExecute: DateTime
    dateLockedOut: DateTime
}

type Category {
    _id: String!
    parentCategory: Category
    name: String
    dateLastModified: DateTime
}

type ActivityDays {
    sunday: Boolean
    monday: Boolean
    tuesday: Boolean
    wednesday: Boolean
    thursday: Boolean
    friday: Boolean
    saturday: Boolean
}

input InputActivityDays {
    sunday: Boolean
    monday: Boolean
    tuesday: Boolean
    wednesday: Boolean
    thursday: Boolean
    friday: Boolean
    saturday: Boolean
}

type Perform {
    _id: String!
    performerId: String!
    categoryId: [String!]!
    addressPreference: Address
    minimumPaymentAmount: Float
    activityDays: ActivityDays
    activityHoursStart: DateTime
    address: Address
    dateCreated: DateTime
    dateLastModified: DateTime
    preferredPaymentMethod: PaymentType
}

input PerformInput {
    performerId: String!
    categoryId: [String!]!
    addressPreference: AddressInput
    minimumPaymentAmount: Float
    activityDays: InputActivityDays
    activityHoursStart: DateTime
    address: AddressInput
    dateCreated: DateTime
    dateLastModified: DateTime
    preferredPaymentMethod: PaymentType
}

input UpdatePerformInput {
    categoryId: [String]
    addressPreference: AddressInput
    minimumPaymentAmount: Float
    activityDays: InputActivityDays
    activityHoursStart: DateTime
    address: AddressInput
    preferredPaymentMethod: PaymentType
}

enum FavorTransactionStatus {
    PENDING_FOR_OWNER
    WAITING_FOR_JESTA_EXECUTION_TIME
    EXECUTOR_FINISH_JESTA
    JESTA_DONE
    CANCELED
    CLOSED
}

type FavorTransaction {
    _id: String!
    status: String!
    favorId: String!
    favorOwnerId: String!
    handledByUserId: String!
    ownerComment: String
    handlerComment: String
    dateAccepted: DateTime
    dateCompleted: DateTime
    dateCreated: DateTime
    dateLastModified: DateTime
    rating: Float
}

type PopulatedFavorTransaction {
    _id: String!
    status: String!
    favorId: Favor
    favorOwnerId: User!
    handledByUserId: User!
    ownerComment: String
    handlerComment: String
    dateAccepted: DateTime
    dateCompleted: DateTime
    dateCreated: DateTime
    dateLastModified: DateTime
    rating: Float
}

type GraphData {
    labels: [String]
    dataSets: [Int]
}
